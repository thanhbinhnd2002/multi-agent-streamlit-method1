# ‚úÖ UI.py ‚Äî Streamlit interface with visualization and result matching support

import sys
import os
import tempfile
import streamlit as st
import pandas as pd
import networkx as nx
import matplotlib.pyplot as plt
from joblib import Parallel, delayed
from tqdm import tqdm

sys.path.append(os.path.abspath(".."))
from Simulate.Simulate_Model import import_network, simulate
from functions.Compare import match_with_oncokb_pubmed

# --- C·∫•u h√¨nh Streamlit ---
st.set_page_config(page_title="Cancer Gene Simulation", layout="wide")
st.title("üî¨ Multi-agent Outside Competitive Dynamics Model")

# --- Sidebar: t·∫£i file v√† ch·ªçn tham s·ªë ---
st.sidebar.header("‚öôÔ∏è Simulation Settings")
uploaded_file = st.sidebar.file_uploader("Upload a .txt network file", type=["txt"])
EPSILON = st.sidebar.slider("Epsilon", 0.05, 1.0, 0.1, step=0.01)
DELTA = st.sidebar.slider("Delta", 0.01, 1.0, 0.2, step=0.01)
MAX_ITER = st.sidebar.number_input("Max Iterations", 10, 200, 50)
TOL = st.sidebar.number_input("Tolerance", 1e-6, 1e-2, 1e-4, format="%e")
N_BETA = st.sidebar.slider("Number of Beta per group", 1, 10, 2)

start = st.sidebar.button("üöÄ Run Simulation", disabled=(uploaded_file is None))
draw = st.sidebar.button("üñºÔ∏è Draw Network", disabled=(uploaded_file is None))

# --- ƒê·ªçc file m·∫°ng ---
if uploaded_file:
    filename = uploaded_file.name
    st.session_state["filename"] = filename
    st.code(filename)

    # ‚úÖ Ghi file t·∫°m ƒë√∫ng chu·∫©n trong m√¥i tr∆∞·ªùng cloud
    temp_dir = tempfile.gettempdir()
    temp_path = os.path.join(temp_dir, filename)

    with open(temp_path, "wb") as f:
        f.write(uploaded_file.getbuffer())

    st.session_state["temp_path"] = temp_path

    G = import_network(temp_path)
    st.session_state["graph"] = G
    st.write(f"‚úÖ Network loaded with **{len(G.nodes())} nodes** and **{len(G.edges())} edges**.")
else:
    st.warning("‚ö†Ô∏è Please upload a network file.")

# --- V·∫Ω m·∫°ng ---
if draw and "graph" in st.session_state:
    G = st.session_state["graph"]
    fig, ax = plt.subplots(figsize=(7, 5))
    pos = nx.spring_layout(G, seed=42)
    nx.draw(G, pos, with_labels=False, node_size=30, edge_color="gray", ax=ax)
    st.pyplot(fig)

# --- Ch·∫°y m√¥ ph·ªèng ---
if start and "temp_path" in st.session_state:
    with st.spinner("Running simulation..."):
        result = simulate(
            file_path=st.session_state["temp_path"],
            EPSILON=EPSILON,
            DELTA=DELTA,
            MAX_ITER=MAX_ITER,
            TOL=TOL,
            N_BETA=N_BETA
        )

        # ‚úÖ N·∫øu simulate tr·∫£ v·ªÅ tuple ‚Üí l·∫•y ph·∫ßn t·ª≠ ƒë·∫ßu
        if isinstance(result, tuple):
            df = result[0]
        else:
            df = result

        st.session_state["result_df"] = df

# --- Hi·ªÉn th·ªã k·∫øt qu·∫£ ---
if "result_df" in st.session_state and "filename" in st.session_state:
    df = st.session_state["result_df"]

    if df is None:
        st.error("‚ùå K·∫øt qu·∫£ m√¥ ph·ªèng l√† None. M√¥ ph·ªèng ƒë√£ th·∫•t b·∫°i.")
        st.stop()

    if isinstance(df, tuple):
        df = df[0]

    if df.empty:
        st.error("‚ö†Ô∏è K·∫øt qu·∫£ m√¥ ph·ªèng r·ªóng. Kh√¥ng c√≥ node n√†o ƒë∆∞·ª£c x·ª≠ l√Ω.")
        st.stop()

    if "Total_Support" not in df.columns:
        st.error("‚ö†Ô∏è Thi·∫øu c·ªôt 'Total_Support' trong k·∫øt qu·∫£. Ki·ªÉm tra l·∫°i h√†m simulate().")
        st.write(df)
        st.stop()

    st.success("‚úÖ Simulation completed.")
    st.subheader(f"üìä Simulation Result for: `{st.session_state['filename']}`")
    st.dataframe(df.sort_values("Total_Support", ascending=True))
    df = st.session_state["result_df"]


    st.download_button(
        "‚¨áÔ∏è Download Result CSV",
        data=df.to_csv(index=False),
        file_name="simulation_result.csv",
        mime="text/csv"
    )
    if st.button("üîç ƒê·ªëi chi·∫øu v·ªõi OncoKB v√† PubMed"):
        matched_df = match_with_oncokb_pubmed(df)
        st.session_state["matched_df"] = matched_df

# --- K·∫øt qu·∫£ ƒë·ªëi chi·∫øu ---
if "matched_df" in st.session_state:
    st.subheader("üß¨ Matched Genes (OncoKB / PubMed)")
    matched_df = st.session_state["matched_df"]
    st.dataframe(matched_df)
    st.download_button(
        "üíæ T·∫£i k·∫øt qu·∫£ ƒë·ªëi chi·∫øu",
        data=matched_df.to_csv(index=False),
        file_name="matched_result.csv",
        mime="text/csv"
    )
