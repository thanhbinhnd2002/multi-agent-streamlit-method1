# === TH∆Ø VI·ªÜN C·∫¶N THI·∫æT ===
import os
import networkx as nx
import numpy as np
import pandas as pd
from tqdm import tqdm
from joblib import Parallel, delayed
from multiprocessing import cpu_count

# === THAM S·ªê M√î H√åNH ===
INF = 10000
EPSILON = 0.05  # H·ªá s·ªë ·∫£nh h∆∞·ªüng t·ª´ c√°c node th∆∞·ªùng
DELTA = 0.1     # H·ªá s·ªë ·∫£nh h∆∞·ªüng t·ª´ c√°c node Beta
MAX_ITER = 50   # S·ªë v√≤ng l·∫∑p t·ªëi ƒëa ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i
TOL = 1e-4      # Ng∆∞·ª°ng h·ªôi t·ª•
N_BETA = 2      # S·ªë l∆∞·ª£ng Beta node ƒë∆∞·ª£c g√°n m·ªói l·∫ßn

# === GIAI ƒêO·∫†N 1: ƒê·ªçc m·∫°ng t·ª´ file ===
def import_network(file_path):
    """
    ƒê·ªçc m·∫°ng t·ª´ file .txt v·ªõi ƒë·ªãnh d·∫°ng: from, to, direction, weight
    direction = 0: hai chi·ªÅu, direction = 1: m·ªôt chi·ªÅu
    """
    with open(file_path, "r") as f:
        data = f.readlines()[1:]
    G = nx.DiGraph()
    for line in data:
        from_node, to_node, direction, weight = line.strip().split("\t")
        direction = int(direction)
        weight = float(weight)
        G.add_edge(from_node, to_node, weight=weight)
        if direction == 0:
            G.add_edge(to_node, from_node, weight=weight)
    return G

# === GIAI ƒêO·∫†N 2: X√¢y d·ª±ng ma tr·∫≠n k·ªÅ v√† h√†ng x√≥m ===
def build_adjacency(G, node_order):
    """
    T·∫°o ma tr·∫≠n k·ªÅ A v√† dict neighbors l∆∞u c√°c h√†ng x√≥m ng∆∞·ª£c (c·∫°nh ƒëi v√†o node).
    node_order d√πng ƒë·ªÉ ƒë√°nh s·ªë ch·ªâ m·ª•c node nh·∫•t qu√°n.
    """
    n = len(node_order)
    node_index = {node: i for i, node in enumerate(node_order)}
    A = np.zeros((n, n))
    neighbors = {i: [] for i in range(n)}
    for u, v, data in G.edges(data=True):
        i, j = node_index[u], node_index[v]
        A[i, j] += data.get("weight", 1.0)
        neighbors[j].append(i)
    return A, neighbors, node_index

# === GIAI ƒêO·∫†N 3: C·∫≠p nh·∫≠t tr·∫°ng th√°i cho t·∫•t c·∫£ node th∆∞·ªùng ===
def update_states_multi_beta(x, A, neighbors, beta_indices, beta_weights, fixed_nodes):
    """
    C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa t·∫•t c·∫£ node trong m·∫°ng t·∫°i 1 th·ªùi ƒëi·ªÉm.
    Bao g·ªìm ·∫£nh h∆∞·ªüng n·ªôi m·∫°ng (t·ª´ h√†ng x√≥m) v√† ·∫£nh h∆∞·ªüng t·ª´ c√°c Beta.
    """
    n = len(x)
    x_new = x.copy()
    for u in range(n):
        if u in fixed_nodes:
            continue  # Node c·ªë ƒë·ªãnh (Alpha ho·∫∑c Beta) kh√¥ng c·∫≠p nh·∫≠t
        # ·∫¢nh h∆∞·ªüng n·ªôi m·∫°ng t·ª´ c√°c node h√†ng x√≥m
        influence = EPSILON * sum(A[v, u] * (x[v] - x[u]) for v in neighbors[u])
        # ·∫¢nh h∆∞·ªüng t·ª´ c√°c Beta node
        beta_influence = DELTA * sum(
            w * (x[b] - x[u]) for b, w in zip(beta_indices, beta_weights[u])
        )
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i node u
        x_new[u] = x[u] + influence + beta_influence
    return np.clip(x_new, -1000, 1000)  # Gi·ªõi h·∫°n ƒë·ªÉ tr√°nh tr√†n s·ªë

# === GIAI ƒêO·∫†N 4: G√°n t·∫•t c·∫£ Beta v√†o 1 target node v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i ===
def simulate_beta_on_target(G, beta_nodes, target_node, x_prev=None, alpha_idx=None, node_order=None):
    """
    M√¥ ph·ªèng qu√° tr√¨nh c·∫°nh tranh: g√°n t·∫•t c·∫£ Beta v√†o 1 target node v√† lan truy·ªÅn.
    """
    if node_order is None:
        node_order = list(G.nodes())

    # T·∫°o danh s√°ch t·∫•t c·∫£ node (g·ªëc + Beta)
    all_nodes = node_order + [f"Beta{i}" for i in range(len(beta_nodes))]
    A, neighbors, node_index = build_adjacency(G, all_nodes)
    n = len(all_nodes)

    # Kh·ªüi t·∫°o tr·∫°ng th√°i n·∫øu ch∆∞a c√≥
    if x_prev is None:
        x_prev = np.zeros(n)
        if alpha_idx is not None:
            alpha_node_name = node_order[alpha_idx]
            alpha_idx_in_new = node_index[alpha_node_name]
            x_prev[alpha_idx_in_new] = 1

    # ƒê·∫£m b·∫£o k√≠ch th∆∞·ªõc x_prev ph√π h·ª£p
    if x_prev.shape[0] != n:
        x_prev = np.pad(x_prev, (0, n - x_prev.shape[0]), mode="constant")

    x = x_prev.copy()
    beta_indices = []
    fixed_nodes = set()
    beta_weights = [[0] * len(beta_nodes) for _ in range(n)]

    # G√°n t·∫•t c·∫£ Beta v√†o c√πng 1 target node
    for i, beta in enumerate(beta_nodes):
        beta_name = f"Beta{i}"
        beta_idx = node_index[beta_name]
        A[beta_idx, node_index[target_node]] = 1.0
        neighbors[node_index[target_node]].append(beta_idx)
        x[beta_idx] = -1
        beta_indices.append(beta_idx)
        fixed_nodes.add(beta_idx)
        beta_weights[node_index[target_node]][i] = 1.0

    # C·∫≠p nh·∫≠t tr·∫°ng th√°i cho ƒë·∫øn khi h·ªôi t·ª•
    for _ in range(MAX_ITER):
        x_new = update_states_multi_beta(x, A, neighbors, beta_indices, beta_weights, fixed_nodes)
        if np.linalg.norm(x_new - x) < TOL:
            break
        x = x_new

    return x[:len(G.nodes())]  # Tr·∫£ v·ªÅ tr·∫°ng th√°i c·ªßa node th∆∞·ªùng (lo·∫°i b·ªè Beta)

# === GIAI ƒêO·∫†N 5: T√≠nh t·ªïng h·ªó tr·ª£ cho Alpha node ===
def compute_total_support(x_state, alpha_idx):
    """
    T·ªïng h·ªó tr·ª£ = s·ªë node ·ªßng h·ªô (x > 0) tr·ª´ s·ªë node ph·∫£n ƒë·ªëi (x < 0), kh√¥ng t√≠nh Alpha.
    """
    return sum(1 if x > 0 else -1 if x < 0 else 0 for i, x in enumerate(x_state) if i != alpha_idx)

# === GIAI ƒêO·∫†N 6: X·ª≠ l√Ω 1 node Alpha ===
def process_alpha(alpha_node, G, beta_nodes):
    """
    V·ªõi m·ªói node Alpha:
        - G√°n t·∫•t c·∫£ Beta v√†o t·ª´ng target node c√≤n l·∫°i
        - M·ªói l·∫ßn g√°n, c·∫≠p nh·∫≠t tr·∫°ng th√°i to√†n m·∫°ng
        - Cu·ªëi c√πng t√≠nh t·ªïng h·ªó tr·ª£ cho Alpha
    """
    node_order = list(G.nodes())
    alpha_idx = node_order.index(alpha_node)
    x_state = np.zeros(len(node_order))
    x_state[alpha_idx] = 1

    for target_node in node_order:
        if target_node == alpha_node:
            continue
        x_state = simulate_beta_on_target(G, beta_nodes, target_node, x_state, alpha_idx, node_order)

    support = compute_total_support(x_state, alpha_idx)
    return {"Alpha_Node": alpha_node, "Total_Support": support}

# === GIAI ƒêO·∫†N 7: MAIN PROGRAM ===
def main():
    input_folder = "data_1"
    # Th∆∞ m·ª•c l∆∞u k·∫øt qu·∫£ theo c·∫•u h√¨nh m√¥ h√¨nh
    output_folder = f"Output_test/INF{INF}_EPS{EPSILON}_DELTA{DELTA}_ITER{MAX_ITER}_TOL{TOL}_NBETA{N_BETA}"
    os.makedirs(output_folder, exist_ok=True)

    for file in os.listdir(input_folder):
        if not file.endswith(".txt"):
            continue
    
        path = os.path.join(input_folder, file)
        G = import_network(path)
    
        all_nodes = list(G.nodes())

        # Ch·∫°y song song cho t·∫•t c·∫£ node Alpha
        results = Parallel(n_jobs=-1)(
            delayed(process_alpha)(alpha_node, G, all_nodes[:N_BETA])
            for alpha_node in tqdm(all_nodes, desc=f"üîÅ X·ª≠ l√Ω file {file}")
        )

        # Ghi k·∫øt qu·∫£ ra file CSV
        df = pd.DataFrame(results)
        df.to_csv(os.path.join(output_folder, file.replace(".txt", ".csv")), index=False)
        print(f"‚úÖ Xong: {file}")

# === ƒêI·ªÇM KH·ªûI ƒê·∫¶U CH∆Ø∆†NG TR√åNH ===
if __name__ == "__main__":
    main()
